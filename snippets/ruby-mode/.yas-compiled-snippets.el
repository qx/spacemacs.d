;;; Compiled snippets and support files for `ruby-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'ruby-mode
                     '(("zip" "zip(${enums}) { |${row}| $0 }" "zip(...) { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/zip" nil nil)
                       ("y" ":yields: $0" ":yields: arguments (rdoc)" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/y" nil nil)
                       ("xput" "xhr :put, :${1:update}, id: ${2:1}, ${3:object}: { $4 }$0" "xput" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/xhr-put.yasnippet" nil nil)
                       ("xpost" "xhr :post, :${1:create}, ${2:object}: { $3 }" "xpost" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/xhr-post.yasnippet" nil nil)
                       ("xget" "xhr :get, :${1:show}${2:, id: ${3:1}}$0" "xget" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/xhr-get.yasnippet" nil nil)
                       ("xdelete" "xhr :delete, :${1:destroy}, id: ${2:1}$0" "xdelete" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/xhr-delete.yasnippet" nil nil)
                       ("while" "while ${condition}\n  $0\nend" "while ... end" nil
                        ("control structure")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/while" nil nil)
                       ("when" "when ${condition}\n  $0\nend" "when ... end" nil
                        ("control structure")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/when" nil nil)
                       ("format" "format.${1:js|xml|html}${2: { $0 \\}}" "format" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/wants_format.yasnippet" nil nil)
                       ("w" "attr_writer :" "attr_writer ..." nil
                        ("definitions")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/w" nil nil)
                       ("verify" "verify only: [:$1], method: :post, render: { status: 500, text: \"use HTTP-POST\" }\n" "verify" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/verify-(verify).yasnippet" nil nil)
                       ("vuif" "validates_uniqueness_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:must be unique}\", if: proc { |obj| ${6:obj.condition?} }}" "vuif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_uniqueness_of-if-(vuif).yasnippet" nil nil)
                       ("vu" "validates_uniqueness_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:must be unique}\"}" "vu" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_uniqueness_of-(vu).yasnippet" nil nil)
                       ("vpif" "validates_presence_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:can't be blank}\"}, if: proc { |obj| ${5:obj.condition?} }}" "vpif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_presence_of-if-(vpif)-2.yasnippet" nil nil)
                       ("vp" "validates_presence_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:can't be blank}\"}" "vp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_presence_of-(vp).yasnippet" nil nil)
                       ("vn" "validates_numericality_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:is not a number}\"}" "vn" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_numericality_of.yasnippet" nil nil)
                       ("vnif" "validates_numericality_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:is not a number}\"}, if: proc { |obj| ${5:obj.condition?} }}" "vnif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_numericality_of-if.yasnippet" nil nil)
                       ("vlif" "validates_length_of :${1:attribute}, within: ${2:3..20}${3:, on: :${4:create}, message: \"${5:must be present}\"}, if: proc { |obj| ${6:obj.condition?} }}" "vlif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_length_of-if.yasnippet" nil nil)
                       ("vl" "validates_length_of :${1:attribute}, within: ${2:3..20}${3:, on: :${4:create}, message: \"${5:must be present}\"}" "vl" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_length_of-(vl).yasnippet" nil nil)
                       ("vi" "validates_inclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not included in the list}\"}" "vi" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_inclusion_of.yasnippet" nil nil)
                       ("viif" "validates_inclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not included in the list}\"}, if: proc { |obj| ${7:obj.condition?} }}" "viif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_inclusion_of-if.yasnippet" nil nil)
                       ("vf" "validates_format_of :${1:attribute}, with: /${2:^[${3:\\w\\d}]+\\$}/${4:, on: :${5:create}, message: \"${6:is invalid}\"}" "vf" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_format_of.yasnippet" nil nil)
                       ("vfif" "validates_format_of :${1:attribute}, with: /${2:^[${3:\\w\\d}]+\\$}/${4:, on: :${5:create}, message: \"${6:is invalid}\"}, if: proc { |obj| ${7:obj.condition?} }}" "vfif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_format_of-if.yasnippet" nil nil)
                       ("veif" "validates_exclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not allowed}\"}, if: proc { |obj| ${7:obj.condition?} }}" "veif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_exclusion_of-if-(veif).yasnippet" nil nil)
                       ("ve" "validates_exclusion_of :${1:attribute}${2:, in: ${3:%w( ${4:mov avi} )}, on: :${5:create}, message: \"${6:extension %s is not allowed}\"}" "ve" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_exclusion_of-(ve).yasnippet" nil nil)
                       ("vcif" "validates_confirmation_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:should match confirmation}\", if: proc { |obj| ${5:obj.condition?} }}" "vcif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_confirmation_of-if-(vcif).yasnippet" nil nil)
                       ("vc" "validates_confirmation_of :${1:attribute}${2:, on: :${3:create}, message: \"${4:should match confirmation}\"}" "vc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_confirmation_of-(vc).yasnippet" nil nil)
                       ("vaif" "validates_associated :${1:attribute}${2:, on: :${3:create}, if: proc { |obj| ${5:obj.condition?} }}" "vaif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_associated-if-(vaif).yasnippet" nil nil)
                       ("va" "validates_associated :${1:attribute}${2:, on: :${3:create}}" "va" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_associated-(va).yasnippet" nil nil)
                       ("vao" "validates_acceptance_of :${1:terms}${2:${3:, accept: \"${4:1}\"}${5:, message: \"${6:You must accept the terms of service}\"}}" "vao" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_acceptance_of.yasnippet" nil nil)
                       ("vaoif" "validates_acceptance_of :${1:terms}${2:${3:, accept: \"${4:1}\"}${5:, message: \"${6:You must accept the terms of service}\"}}, if: proc { |obj| ${7:obj.condition?} }}" "vaoif" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/validates_acceptance_of-if.yasnippet" nil nil)
                       ("upt" "upto(${n}) { |${i}|\n  $0\n}" "upto(...) { |n| ... }" nil
                        ("control structure")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/upt" nil nil)
                       ("until" "until ${condition}\n  $0\nend" "until ... end" nil
                        ("control structure")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/until" nil nil)
                       ("tu" "require 'test/unit'" "tu" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/tu" nil nil)
                       ("to_" "def to_s\n    \"${1:string}\"\nend\n$0" "to_" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/to_" nil nil)
                       ("tim" "times { |${n}| $0 }" "times { |n| ... }" nil
                        ("control structure")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/tim" nil nil)
                       ("tc" "class TC_${1:Class} < Test::Unit::TestCase\n      $0\nend" "test class" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/test class" nil nil)
                       ("t." "t.timestamps\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_timestamps-(tctss).yasnippet" nil nil)
                       ("t." "t.timestamp :${1:title}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_timestamp-(tcts).yasnippet" nil nil)
                       ("t." "t.time :${1:title}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_time-(tcti).yasnippet" nil nil)
                       ("t." "t.text :${1:title}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_text-(tct).yasnippet" nil nil)
                       ("t." "t.string :${1:title}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_string-(tcs).yasnippet" nil nil)
                       ("t." "t.rename(:${1:old_column_name}, :${2:new_column_name})\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_rename-(tre).yasnippet" nil nil)
                       ("t." "t.references :${1:taggable}${2:, polymorphic: ${3:{ default: '${4:Photo}' \\}}}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_references-(tcr).yasnippet" nil nil)
                       ("t." "t.integer :lock_version, null: false, default: 0\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_lock_version-(tcl).yasnippet" nil nil)
                       ("t." "t.integer :${1:title}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_integer-(tci).yasnippet" nil nil)
                       ("t." "t.float :${1:title}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_float-(tcf).yasnippet" nil nil)
                       ("t." "t.decimal :${1:title}${2:${3:, precision: ${4:10}}${5:, scale: ${6:2}}}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_decimal-(tcd).yasnippet" nil nil)
                       ("t." "t.datetime :${1:title}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_datetime-(tcdt).yasnippet" nil nil)
                       ("t." "t.date :${1:title}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_date-(tcda).yasnippet" nil nil)
                       ("t." "t.boolean :${1:title}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_boolean-(tcb).yasnippet" nil nil)
                       ("t." "t.binary :${1:title}${2:, limit: ${3:2}.megabytes}\nt.$0" "t." nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/t_binary-(tcbi).yasnippet" nil nil)
                       ("s" "#{$0}" "str" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/str" nil nil)
                       ("select" "select { |${1:element}| $0 }" "select { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/select" nil nil)
                       ("scar" "scope :${1:name}, ->(${2:arg}){ where(${3:attribute:} $2) }\n" "scar" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/scope_with_args.yasnippet" nil nil)
                       ("sc" "scope :${1:name}, ->{ where(${2:attr:} ${3:value}) }\n" "sc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/scope.yasnippet" nil nil)
                       ("rw" "attr_accessor :" "attr_accessor ..." nil
                        ("definitions")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rw" nil nil)
                       ("val" "validates :${1:column}, presence: true, uniqueness: true \n" "val" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/ruby-validates.yasnippet" nil nil)
                       ("stubs" "stub(:${1:value_key1} => ${2:value_return1},:${3:value_key2} => ${4:value_return2})\n\n" "rspec-stubs" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rspec-stubs.yasnippet" nil nil)
                       ("stub" "stub(:${1:value_key}).and_return(${2:return_value})\n" "rspec-stub" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rspec-stub.yasnippet" nil nil)
                       ("let" "let(:${1:methodname}){${2:&block}}\n" "rspec-let" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rspec-let.yasnippet" nil nil)
                       ("its" "its(:$1) {$2}\n" "its" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rspec-its.snippet" nil nil)
                       ("desc" "describe $1 do\n$2\nend\n" "desc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rspec-desc.snippet" nil nil)
                       ("context" "context '${1:describe/Class}' do\n${2:content}\nend" "rspec-context" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rspec-context.yasnippet" nil nil)
                       ("resdm" "resources :${1:res_name} do\n  member do\n    ${2:get} :${3:action}\n  end\nend" "resdm" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/routes_resources_member_block.yasnippet" nil nil)
                       ("resdc" "resources :${1:res_name} do\n  collection do\n    ${2:get} :${3:action}\n  end\nend" "resdc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/routes_resources_collection_block.yasnippet" nil nil)
                       ("resd" "resources :${1:res_name} do\n  $2\nend" "resd" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/routes_resources_block.yasnippet" nil nil)
                       ("res" "resources :${1:res_name}" "res" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/routes_resources.yasnippet" nil nil)
                       ("reso" "resources :${1:res_name}, only: [:${2:index}]" "reso" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/routes_resource_only.yasnippet" nil nil)
                       ("returning" "returning ${1:variable} do${2/(^(?<var>\\s*[a-z_][a-zA-Z0-9_]*\\s*)(,\\g<var>)*,?\\s*$)|.*/(?1: |)/}${2:v}${2/(^(?<var>\\s*[a-z_][a-zA-Z0-9_]*\\s*)(,\\g<var>)*,?\\s*$)|.*/(?1:|)/}\n	$0\nend" "returning" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/returning-do-7Cvariable7C-E280A6-end.yasnippet" nil nil)
                       ("rest" "respond_to do |format|\n	format.${1:html}${2: { $0 \\}}\nend" "rest" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/respond_to.yasnippet" nil nil)
                       ("req" "require '$0'" "require \"...\"" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/req" nil nil)
                       ("ru" "render :update do |${2:page}|\n	$2.$0\nend" "ru" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(update).yasnippet" nil nil)
                       ("rts" "render text: \"${1:text to render...}\", status: ${2:401}" "rts" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(text-status)-(rts).yasnippet" nil nil)
                       ("rtlt" "render text: \"${1:text to render...}\", layout: ${2:true}" "rtlt" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(text-layout=3Etrue)-(rtlt).yasnippet" nil nil)
                       ("rtl" "render text: \"${1:text to render...}\", layout: \"${2:layoutname}\"" "rtl" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(text-layout)-(rtl).yasnippet" nil nil)
                       ("rt" "render text: \"${1:text to render...}\"" "rt" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(text)-(rt).yasnippet" nil nil)
                       ("rtips" "#请在此处按要求添加代码,修改请删除该注释  START\n\n$0\n\n#请在此处按要求添加代码,修改请删除该注释    END\n" "rtips" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(partial-status)-(rps).yasnippet" nil nil)
                       ("rns" "render nothing: ${1:true}, status: ${2:401}" "rns" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(nothing-status)-(rns).yasnippet" nil nil)
                       ("rn" "render nothing: ${1:true}" "rn" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(nothing)-(rn).yasnippet" nil nil)
                       ("rl" "render layout: \"${1:layoutname}\"" "rl" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(layout)-(rl).yasnippet" nil nil)
                       ("rit" "render inline: \"${1:<%= 'hello' %>}\", type: ${2::rxml}" "rit" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(inline-type)-(rit).yasnippet" nil nil)
                       ("ril" "render inline: \"${1:<%= 'hello' %>}\", locals: { ${2:name}: \"${3:value}\"$4 }" "ril" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(inline-locals)-(ril).yasnippet" nil nil)
                       ("ri" "render inline: \"${1:<%= 'hello' %>}\"" "ri" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(inline)-(ri).yasnippet" nil nil)
                       ("rfu" "render file: \"${1:filepath}\", use_full_path: ${2:false}" "rfu" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(file-use_full_path)-(rfu).yasnippet" nil nil)
                       ("rf" "render file: \"${1:filepath}\"" "rf" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(file)-(rf).yasnippet" nil nil)
                       ("ral" "render action: \"${1:action}\", layout: \"${2:layoutname}\"" "ral" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(action-layout)-(ral).yasnippet" nil nil)
                       ("ra" "render action: \"${1:action}\"" "ra" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/render-(action)...-(ra).yasnippet" nil nil)
                       ("rel" "require_relative '$0'" "require_relative" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rel" nil nil)
                       ("reject" "reject { |${1:element}| $0 }" "reject { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/reject" nil nil)
                       ("repp" "redirect_to(${2:${10:model}s_path})" "repp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/redirect_to-(path-plural).yasnippet" nil nil)
                       ("rep" "redirect_to(${2:${12:model}_path(${13:@}${14:$12})})" "rep" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/redirect_to-(path).yasnippet" nil nil)
                       ("renpp" "redirect_to(${2:${10:parent}_${11:child}_path(${12:@}${13:$10})})" "renpp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/redirect_to-(nested-path-plural).yasnippet" nil nil)
                       ("renp" "redirect_to(${2:${12:parent}_${13:child}_path(${14:@}${15:$12}, ${16:@}${17:$13})})" "renp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/redirect_to-(nested-path).yasnippet" nil nil)
                       ("red" "reduce(${1:0}) { |${2:accumulator}, ${3:element}| $0 }\n" "reduce(...) { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/red" nil nil)
                       ("recai" "redirect_to controller: \"${1:items}\", action: \"${2:show}\", id: ${0:@item}" "recai" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/recai.yasnippet" nil nil)
                       ("reca" "redirect_to controller: \"${1:items}\", action: \"${2:list}\"" "reca" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/reca.yasnippet" nil nil)
                       ("rec" "redirect_to controller: \"${1:items}\"" "rec" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rec.yasnippet" nil nil)
                       ("reai" "redirect_to action: \"${1:show}\", id: ${0:@item}" "reai" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/reai.yasnippet" nil nil)
                       ("rea" "redirect_to action: \"${1:index}\"" "rea" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rea.yasnippet" nil nil)
                       ("rb" "#!/usr/bin/ruby -wU\n" "/usr/bin/ruby -wU" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rb" nil nil)
                       ("flash" "flash[:${1:notice}] = \"${2:Successfully created...}\"$0" "flash" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/rails-flash.yasnippet" nil nil)
                       ("r" "attr_reader :" "attr_reader ..." nil
                        ("definitions")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/r" nil nil)
                       ("lsc" "scope :name, ->(${1:param}){ ${3:['${4:${5:field} = ?}', ${6:$1}]} }\n" "lsc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/named_scope-lambda.yasnippet" nil nil)
                       ("mod" "module ${1:`(let ((fn (capitalize (file-name-nondirectory\n                                 (file-name-sans-extension\n         (or (buffer-file-name)\n             (buffer-name (current-buffer))))))))\n           (while (string-match \"_\" fn)\n             (setq fn (replace-match \"\" nil nil fn)))\n           fn)`}\n  $0\nend" "module ... end" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/mod" nil nil)
                       ("mm" "def method_missing(method, *args)\n  $0\nend" "def method_missing ... end" nil
                        ("definitions")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/mm" nil nil)
                       ("mrw" "mattr_accessor :${0:attr_names}" "mrw" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/mattr_accessor.yasnippet" nil nil)
                       ("mp" "map(&:${1:id})" "mp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/map(-3Asym_proc).yasnippet" nil nil)
                       ("map" "map { |${e}| $0 }" "map { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/map" nil nil)
                       ("logw" "logger.warn { \"${1:message}\" }$0" "logw" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/logger_warn.yasnippet" nil nil)
                       ("logi" "logger.info { \"${1:message}\" }$0" "logi" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/logger_info.yasnippet" nil nil)
                       ("logf" "logger.fatal { \"${1:message}\" }$0" "logf" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/logger_fatal.yasnippet" nil nil)
                       ("loge" "logger.error { \"${1:message}\" }$0" "loge" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/logger_error.yasnippet" nil nil)
                       ("logd" "logger.debug { \"${1:message}\" }$0" "logd" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/logger_debug.yasnippet" nil nil)
                       ("inject" "inject(${1:0}) { |${2:injection}, ${3:element}| $0 }" "inject(...) { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/inject" nil nil)
                       ("defi" "def initialize(${1:attribute})\n  @$1 = $1\nend" "defi" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/initializer-method.yasnippet" nil nil)
                       ("init" "def initialize(${1:args})\n    $0\nend" "init" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/init" nil nil)
                       ("inc" "include ${1:Module}\n$0\n" "include Module" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/inc" nil nil)
                       ("ife" "if ${1:condition}\n  $2\nelse\n  $3\nend" "if ... else ... end" nil
                        ("control structure")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/ife" nil nil)
                       ("if" "if ${1:condition}\n  $0\nend" "if ... end" nil
                        ("control structure")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/if" nil nil)
                       ("hot" "has_one :${1:object}, through: :${2:join_association}${3:, source: :${4:$2_table_foreign_key_to_$1_table}}" "hot" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/has_one_through-(hot).yasnippet" nil nil)
                       ("ho" "has_one :${1:object}${2:, class_name: \"${3:${1/[[:alpha:]]+|(_)/(?1::\\u$0)/g}}\", foreign_key: \"${4:$1_id}\"}" "ho" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/has_one-(ho).yasnippet" nil nil)
                       ("hmd" "has_many :${1:object}s${2:, class_name: \"$1\", foreign_key: \"${4:reference}_id\"}, dependent: :destroy$0" "hmd" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/has_many-dependent-=-destroy.yasnippet" nil nil)
                       ("hmt" "has_many :${1:objects}, through: :${2:join_association}${3:, source: :${4:$2_table_foreign_key_to_$1_table}}" "hmt" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/has_many-(through).yasnippet" nil nil)
                       ("hm" "has_many :${1:object}s${2:, class_name: \"$1\", foreign_key: \"${4:reference}_id\"}" "hm" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/has_many-(hm).yasnippet" nil nil)
                       ("habtm" "has_and_belongs_to_many :${1:object}${2:, join_table: \"${3:table_name}\", foreign_key: \"${4:$1_id}\"}" "habtm" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/has_and_belongs_to_many-(habtm).yasnippet" nil nil)
                       ("form" "require 'formula'\n\nclass ${1:Name} <Formula\n  url '${2:url}'\n  homepage '${3:home}'\n  md5 '${4:md5}'\n\n  def install\n    ${5:system \"./configure\"}\n    $0\n  end\nend\n" "formula" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/formula" nil nil)
                       ("forin" "for ${1:element} in ${2:collection}\n  $0\nend" "for ... in ...; ... end" nil
                        ("control structure")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/forin" nil nil)
                       ("for" "for ${1:el} in ${2:collection}\n    $0\nend" "for" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/for" nil nil)
                       ("fp" "find(params[:${1:id}])" "fp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/find_params_id_(fp).yasnippet" nil nil)
                       ("fini" "find(${1:id})" "fini" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/find(id).yasnippet" nil nil)
                       ("eawi" "each_with_index { |${e}, ${i}| $0 }" "each_with_index { |e, i| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/eawi" nil nil)
                       ("eav" "each_value { |${val}| $0 }" "each_value { |val| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/eav" nil nil)
                       ("eai" "each_index { |${i}| $0 }" "each_index { |i| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/eai" nil nil)
                       ("eac" "each_cons(${1:2}) { |${group}| $0 }" "each_cons(...) { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/eac" nil nil)
                       ("ea" "each { |${e}| $0 }" "each { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/ea" nil nil)
                       ("dow" "downto(${0}) { |${n}|\n  $0\n}" "downto(...) { |n| ... }" nil
                        ("control structure")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/dow" nil nil)
                       ("det" "detect { |${e}| $0 }" "detect { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/det" nil nil)
                       ("deli" "delete_if { |${e}| $0 }" "delete_if { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/deli" nil nil)
                       ("deftp" "def test_should_post_${1:action}\n	${3:@$2 = ${4:$2s}(:${5:fixture_name})\n	}post :$1${6:, id: @$2.to_param}, ${2:model}: { $0 }\n	assert_response :redirect\n\nend" "deftp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/def-post-request.yasnippet" nil nil)
                       ("deftg" "def test_should_get_${1:action}\n	${2:@${3:model} = ${4:$3s}(:${5:fixture_name})\n	}get :$1${6:, id: @$3.to_param}\n	assert_response :success\n	$0\nend" "deftg" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/def-get-request.yasnippet" nil nil)
                       ("desc" "describe $1 do\n$2\nend" "desc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/def-create-resource.yasnippet" nil nil)
                       ("def" "def ${1:method}${2:(${3:args})}\n    $0\nend" "def ... end" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/def" nil nil)
                       ("dee" "Marshal.load(Marshal.dump($0))" "deep_copy(...)" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/dee" nil nil)
                       ("crud" "\n  def index\n    @$1 = ${1/(.+)/\\u$1/g}.scoped\n  end\n\n  def show\n    @$1 = ${1/(.+)/\\u$1/g}.find(params[:id])\n  end\n\n  def create\n    @$1 = ${1/(.+)/\\u$1/g}.new(params[:$1])\n  end\n\n  def update\n    @$1 = ${1/(.+)/\\u$1/g}.find(params[:id])\n  end\n\n  def edit\n    @$1 = ${1/(.+)/\\u$1/g}.find(params[:id])\n  end\n\n  def destroy\n    $1 = ${1/(.+)/\\u$1/g}.find(params[:id])\n  end" "crud" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/crud-actions.yasnippet" nil nil)
                       ("collect" "collect { |${e}| $0 }" "collect { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/collect" nil nil)
                       ("cls" "class ${1:`(let ((fn (capitalize (file-name-nondirectory\n                                 (file-name-sans-extension\n				 (or (buffer-file-name)\n				     (buffer-name (current-buffer))))))))\n             (replace-regexp-in-string \"_\" \"\" fn t t))`}\n  $0\nend\n" "class ... end" nil
                        ("definitions")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/cls" nil nil)
                       ("class" "class ${1:${TM_FILENAME/(?:\\A|_)([A-Za-z0-9]+)(?:\\.rb)?/(?2::\\u$1)/g}}\n$0\nend" "class" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/class-end.yasnippet" nil nil)
                       ("cla" "class << ${self}\n  $0\nend" "class << self ... end" nil
                        ("definitions")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/cla" nil nil)
                       ("crw" "cattr_accessor :${0:attr_names}" "crw" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/cattr_accessor.yasnippet" nil nil)
                       ("case" "case ${1:object}\nwhen ${2:condition}\n  $0\nend" "case ... end" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/case" nil nil)
                       ("bb" "\nbyebug\n" "bb" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/byebug.yasnippet" nil nil)
                       ("bm" "Benchmark.bmbm(${1:10}) do |x|\n  $0\nend" "Benchmark.bmbm(...) do ... end" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/bm" nil nil)
                       ("bp" "\nbinding.pry\n" "bp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/binding_pry.yasnippet" nil nil)
                       ("bench" "require \"benchmark\"\n\nTESTS = ${1:1_000}\nBenchmark.bmbm do |x|\n  x.report(\"${2:var}\") {}\nend\n" "bench" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/bench" nil nil)
                       ("bt" "belongs_to :${1:object}${2:, class_name: \"${3:${1/[[:alpha:]]+|(_)/(?1::\\u$0)/g}}\", foreign_key: \"${4:$1_id}\"}" "bt" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/belongs_to-(bt).yasnippet" nil nil)
                       ("befvou" "before_validation ${1:validation_method}, on: :update" "befvou" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/before_validation_on_update.yasnippet" nil nil)
                       ("befvoc" "before_validation ${1:validation_method}, on: :create" "befvoc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/before_validation_on_create.yasnippet" nil nil)
                       ("befv" "before_validation " "befv" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/before_validation.yasnippet" nil nil)
                       ("befu" "before_update " "befu" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/before_update.yasnippet" nil nil)
                       ("befs" "before_save " "befs" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/before_save.yasnippet" nil nil)
                       ("befd" "before_destroy " "befd" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/before_destroy.yasnippet" nil nil)
                       ("befc" "before_create " "befc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/before_create.yasnippet" nil nil)
                       ("@" "@${1:attr} = $0" "attribute" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/attribute" nil nil)
                       ("ass" "assert_select '${1:path}'${2:, ${3:text}: ${4:'${5:inner_html}'}}${6: do\n	$0\nend}" "ass" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/assert_select.yasnippet" nil nil)
                       ("artpp" "assert_redirected_to ${10:${2:model}s_path}" "artpp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/assert_redirected_to-(path-plural).yasnippet" nil nil)
                       ("artp" "assert_redirected_to ${2:${12:model}_path(${13:@}${14:$12})}" "artp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/assert_redirected_to-(path).yasnippet" nil nil)
                       ("artnpp" "assert_redirected_to ${10:${2:parent}_${3:child}_path(${4:@}${5:$2})}" "artnpp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/assert_redirected_to-(nested-path-plural).yasnippet" nil nil)
                       ("artnp" "assert_redirected_to ${2:${12:parent}_${13:child}_path(${14:@}${15:$12}, ${16:@}${17:$13})}" "artnp" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/assert_redirected_to-(nested-path).yasnippet" nil nil)
                       ("asnd" "assert_no_difference \"${1:Model}.${2:count}\" do\n  $0\nend" "asnd" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/assert_no_difference.yasnippet" nil nil)
                       ("asd" "assert_difference \"${1:Model}.${2:count}\", ${3:1} do\n  $0\nend" "asd" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/assert_difference.yasnippet" nil nil)
                       ("asg" "assert(${1:var} = assigns(:$1), \"Cannot find @$1\")\n$0" "asg" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/assert(var-=-assigns(3Avar)).yasnippet" nil nil)
                       ("begin" "begin\n  ${1:yourcode}\nrescue Exception => e\n       puts e\nensure\n  ${2:surerun}\n# make sure to run\nend\n" "begin-rescue-end" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/array_map" nil nil)
                       ("app" "if __FILE__ == $PROGRAM_NAME\n  $0\nend" "if __FILE__ == $PROGRAM_NAME ... end" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/app" nil nil)
                       ("any" "any? { |${e}| $0 }" "any? { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/any" nil nil)
                       ("am" "alias_method :${new_name}, :${old_name}" "alias_method new, old" nil
                        ("definitions")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/am" nil nil)
                       ("all" "all? { |${e}| $0 }" "all? { |...| ... }" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/all" nil nil)
                       ("aftvou" "after_validation ${1:validation_method}, on: :update" "aftvou" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/after_validation_on_update.yasnippet" nil nil)
                       ("aftvoc" "after_validation ${1:validation_method}, on: :create" "aftvoc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/after_validation_on_create.yasnippet" nil nil)
                       ("aftv" "after_validation " "aftv" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/after_validation.yasnippet" nil nil)
                       ("aftu" "after_update " "aftu" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/after_update.yasnippet" nil nil)
                       ("afts" "after_save " "afts" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/after_save.yasnippet" nil nil)
                       ("aftd" "after_destroy " "aftd" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/after_destroy.yasnippet" nil nil)
                       ("aftc" "after_create " "aftc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/after_create.yasnippet" nil nil)
                       ("arc" "class ${1:${TM_FILENAME/(?:\\A|_)([A-Za-z0-9]+)(?:\\.rb)?/(?2::\\u$1)/g}} < ActiveRecord::Base\n$0\nend" "arc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/active-record-class-end.yasnippet" nil nil)
                       ("anaf" "accepts_nested_attributes_for :${1:relationship}, ${2:reject_if: ->(attributes){ attributes['name'].blank? \\}}${3:, allow_destroy: true}" "anaf" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/accepts_nested_attributes_for.yasnippet" nil nil)
                       ("asre" "assert_response :${1:success}, @response.body$0" "asre" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Test-Assert-Response-(are).yasnippet" nil nil)
                       ("art" "assert_redirected_to ${2:action: \"${1:index}\"}" "art" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Test-Assert-Redirected-To-(art).yasnippet" nil nil)
                       ("tre" "t.rename(:${1:old_column_name}, :${2:new_column_name})\n$0" "tre" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Table-column(s)-rename.yasnippet" nil nil)
                       ("rdb" "RAILS_DEFAULT_LOGGER.debug \"${1:message}\"$0" "rdb" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/RAILS_DEFAULT_LOGGER.debug-(rdb).yasnippet" nil nil)
                       ("mcol" "rename_column :${1:table}, :${2:old_column_name}, :${3:new_column_name}" "mcol" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Rename-Column.yasnippet" nil nil)
                       ("mind" "remove_index :${1:table}, name: :${2:index_name}" "mind" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Remove-Index.yasnippet" nil nil)
                       ("mcol" "remove_column :${1:table}, :${2:column}" "mcol" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Remove-Column.yasnippet" nil nil)
                       ("mtab" "drop_table :${1:table}" "mtab" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Drop-Table-(mdct).yasnippet" nil nil)
                       ("mtab" "create_table :${1:table} do |t|\n  t.${2:string} :${3:name}\n\n  t.timestamps\nend\n" "mtab" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Create-Table-(mdct).yasnippet" nil nil)
                       ("mccc" "t.column ${1:title}, :${2:string}\nmccc$0" "mccc" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Create-Column-Continue-(mccc).yasnippet" nil nil)
                       ("mcol" "t.column ${1:title}, :${2:string}\n$0" "mcol" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Create-Column-(mcc).yasnippet" nil nil)
                       ("~" "ENV['HOME']$0\n" "~" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Change-Column.yasnippet" nil nil)
                       ("mind" "add_index :${1:table}, :${2:columns}${4:, ${5:name}: \"${6:custom_index_name}\"}" "mind" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Add-Index.yasnippet" nil nil)
                       ("mcol" "add_column :${1:table}, :${2:column}, :${3:string}${4:, ${5:limit}: ${6:255}}" "mcol" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Migration-Add-Column.yasnippet" nil nil)
                       ("$L" "\\$LABEL" "$L" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/LABEL.yasnippet" nil nil)
                       ("$" "$${1:GLOBAL} = $0" "GLOB" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/GLOB" nil nil)
                       ("Enum" "include Enumerable\n\ndef each${1:(&block)}\n  $0\nend\n" "include Enumerable" nil
                        ("collections")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Enum" nil nil)
                       ("tctss" "t.timestamps\n$0" "tctss" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-timestamps-columns.yasnippet" nil nil)
                       ("tcts" "t.timestamp :${1:title}\n$0" "tcts" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-timestamp-column.yasnippet" nil nil)
                       ("tcti" "t.time :${1:title}\n$0" "tcti" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-time-column.yasnippet" nil nil)
                       ("tct" "t.text :${1:title}\n$0" "tct" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-text-column.yasnippet" nil nil)
                       ("tcs" "t.string :${1:title}\n$0" "tcs" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-string-column.yasnippet" nil nil)
                       ("tcr" "t.references :${1:taggable}${2:, polymorphic: ${3:{ default: '${4:Photo}' \\}}}\n$0" "tcr" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-references-column.yasnippet" nil nil)
                       ("tcl" "t.integer :lock_version, null: false, default: 0\n$0" "tcl" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-lock_version-column.yasnippet" nil nil)
                       ("tci" "t.integer :${1:title}\n$0" "tci" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-integer-column.yasnippet" nil nil)
                       ("cla" "require File.dirname(__FILE__) + '/../test_helper'\n\nclass ${1:Model}ControllerTest < ActionController::TestCase\n	deft$0\nend\n" "cla" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-functional-test-class.yasnippet" nil nil)
                       ("tcf" "t.float :${1:title}\n$0" "tcf" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-float-column.yasnippet" nil nil)
                       ("tcd" "t.decimal :${1:title}${2:${3:, precision: ${4:10}}${5:, scale: ${6:2}}}\n$0" "tcd" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-decimal-column.yasnippet" nil nil)
                       ("tcdt" "t.datetime :${1:title}\n$0" "tcdt" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-datetime-column.yasnippet" nil nil)
                       ("tcda" "t.date :${1:title}\n$0" "tcda" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-date-column.yasnippet" nil nil)
                       ("con" "class ${1:${TM_FILENAME/(?:\\A|_)([A-Za-z0-9]+)(?:\\.rb)?/(?2::\\u$1)/g}} < ${2:Application}Controller\n  $3\nend" "con" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-controller-class.yasnippet" nil nil)
                       ("tcb" "t.boolean :${1:title}\n$0" "tcb" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-boolean-column.yasnippet" nil nil)
                       ("tcbi" "t.binary :${1:title}${2:, limit: ${3:2}.megabytes}\n$0" "tcbi" nil nil nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Create-binary-column.yasnippet" nil nil)
                       ("Comp" "include Comparable\n\ndef <=> other\n  $0\nend" "include Comparable; def <=> ... end" nil
                        ("definitions")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/Comp" nil nil)
                       ("=b" "=begin rdoc\n  $0\n=end" "=begin rdoc ... =end" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/=b" nil nil)
                       ("#" "# => " "# =>" nil
                        ("general")
                        nil "/Users/ok/.spacemacs.d/snippets/ruby-mode/#" nil nil)))


;;; Do not edit! File generated at Sun Sep 18 09:33:24 2016
